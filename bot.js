//–í—ã–±–æ—Ä –Ø–∑—ã–∫–∞ markup —è–∑—ã–∫–∞? c –ø–æ–º–æ—â—å—é inline_keyboard –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞(Warszawa),
// –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ (–ª–∏–±–æ –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É), –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (Beauty) –∏ –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏

const TelegramBot = require('node-telegram-bot-api');

const token = '6863474147:AAE_jPXTgCLr2IYHYNgmzteTURB_9Jm5y5g';

const bot = new TelegramBot(token, { polling: true });
const axios = require('axios');

let chatState = {};
let selMsg;

function sendWelcomeMessage(chatId) {
    const welcomeMessage = `üáßüáæ –í—ñ—Ç–∞—é, –≥—ç—Ç–∞ yoohivebot, –≤—ã–±–µ—Ä—ã –º–æ–≤—É –Ω—ñ–∂—ç–π, –∫–∞–± –ø—Ä–∞—Ü—è–≥–Ω—É—Ü—å –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫–∞–π –º–æ–≤–µ. –ó –º–∞—ë–π –¥–∞–ø–∞–º–æ–≥–∞–π —Ç—ã –º–æ–∂–∞—à –∞–¥—à—É–∫–∞—Ü—å, –ø–∞—Å–ª—É–≥—ñ, —à—Ç–æ —Ü—ñ–∫–∞–≤—è—Ü—å —Ü—è–±–µ, —É —Å–≤–∞—ñ–º –≥–æ—Ä–∞–¥–∑–µ.\n\n` +
        `üá∑üá∫ –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ yoohivebot, –≤—ã–±–µ—Ä–∏ —è–∑—ã–Ω –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —É—Å–ª—É–≥–∏ –≤ —Å–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ.\n\n` +
        `üáµüá± Cze≈õƒá, tu yoohivebot, wybierz jƒôzyk poni≈ºej, aby kontynuowaƒá po polsku. Z mojƒÖ pomocƒÖ mo≈ºesz znale≈∫ƒá interesujƒÖce Ciƒô us≈Çugi w swoim mie≈õcie.\n\n` +
        `üá∫üá¶ –ü—Ä–∏–≤—ñ—Ç, —Ü–µ yoohivebot, –≤–∏–±–µ—Ä–∏ –º–æ–≤—É –Ω–∏–∂—á–µ, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ó –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–∏ –º–æ–∂–µ—à –∑–Ω–∞–π—Ç–∏ –ø–æ—Å–ª—É–≥–∏, —è–∫—ñ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–ª—è—Ç—å, —É —Å–≤–æ—î–º—É –º—ñ—Å—Ç—ñ.`;
    bot.sendMessage(chatId, welcomeMessage, {
        reply_markup: {
            keyboard: [
                ['üá∑üá∫ –†—É—Å—Å–∫–∏–π'],['üáßüáæ –ë–µ–ª–∞—Ä—É—Å–∫–∞—è'],
                ['üáµüá± Polski'],['üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞']
            ],
            one_time_keyboard: true,
            selective: true
        }
    });
}

bot.onText(/\/start$/, (msg) => {
    const chatId = msg.chat.id;
    chatState = {};

    sendWelcomeMessage(chatId);
});
bot.on('text', (msg) => {
    const chatId = msg.chat.id;
    const selectedLanguage = msg.text.trim();

    switch (selectedLanguage) {
        case 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            selMsg = 'ru'
            sendCitySelectionKeyboard(chatId);
            break;
        case 'üáßüáæ –ë–µ–ª–∞—Ä—É—Å–∫–∞—è':
            selMsg = 'by'
            sendCitySelectionKeyboard(chatId);
            break;
        case 'üáµüá± Polski':
            selMsg = 'pl'
            sendCitySelectionKeyboard(chatId);
            break;
        case 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞':
            selMsg = 'ua'
            sendCitySelectionKeyboard(chatId);
            break;
        default:
            break;
    }
});


function sendCitySelectionKeyboard(chatId, messageId) {
    let cityName;
    switch (selMsg) {
        case 'ru':
            cityName = '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥';
            break;
        case 'by':
            cityName = '–í—ã–±–µ—Ä—ã—Ü–µ –≥–æ—Ä–∞–¥';
            break;
        case 'pl':
            cityName = 'Wybierz miasto';
            break;
        case 'ua':
            cityName = '–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ';
            break;
    }

    const messageText = `${cityName}`;

    if (chatState[chatId]) {
        bot.editMessageText(messageText, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'Warszawa', callback_data: 'city_warszawa' }],
                ]
            }
        }).catch(error => {
            console.error('Error editing message text:', error);
        });
    } else {
        bot.sendMessage(chatId, messageText, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'Warszawa', callback_data: 'city_warszawa' }],
                ]
            }
        }).then(sentMessage => {
            chatState[chatId] = { messageId: sentMessage.message_id };
        }).catch(error => {
            console.error('Error sending city selection keyboard:', error);
        });
    }
}

bot.on('callback_query', (callbackQuery) => {
    const data = callbackQuery.data;
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;

    switch (data) {
        case 'city_warszawa':
            sendWarsawRegionsKeyboard(chatId, messageId);
            break;
        case 'back_to_city_selection':
            sendCitySelectionKeyboard(chatId, messageId);
            break;
        case 'back_to_region_selection':
            sendWarsawRegionsKeyboard(chatId, messageId);
            break;
        case 'region_wola':
            sendCategoriesKeyboard(chatId, messageId);
            break;
        case 'beauty':
            sendCategoriesKeyboard_API(chatId, messageId);
            break;
    }

    bot.answerCallbackQuery(callbackQuery.id);
});

async function sendCategoriesKeyboard_API(chatId, messageId) {
    const apiUrl = `https://yoohive-api-test-version.onrender.com/api/category/all`;
    try {
        const response = await axios.get(apiUrl);
        const categories = response.data;
        const inlineKeyboard = categories.map(category => ([{
            text: category.name,
            callback_data: category.slug,
        }]));

        inlineKeyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'region_wola' }]);

        const options = {
            reply_markup: {
                inline_keyboard: inlineKeyboard,
            }
        };

        bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: options.reply_markup
        }).catch(error => {
            console.error('Error editing message text:', error);
        });
    } catch (error) {
        console.error('Error fetching categories:', error);
    }
}


function sendCategoriesKeyboard(chatId, messageId) {
    let options;
    switch (selMsg) {
        case 'ru':
            options = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ö—Ä–∞—Å–æ—Ç–∞', callback_data: 'beauty' }],
                        [{ text: '–ó–¥–æ—Ä–æ–≤—å–µ', callback_data: 'health' }],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'back_to_region_selection' }],
                    ]
                }
            };
            bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: options.reply_markup
            }).catch(error => {
                console.error('Error editing message text:', error);
            });
            break;
        case 'pl':
            options = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'Uroda', callback_data: 'beauty' }],
                        [{ text: 'Zdrowie', callback_data: 'health' }],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞–ø–ª', callback_data: 'back_to_region_selection' }],
                    ]
                }
            };
            bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–ª', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: options.reply_markup
            }).catch(error => {
                console.error('Error editing message text:', error);
            });
            break;
        case 'ua':
            options = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ö—Ä–∞—Å–∞', callback_data: 'beauty' }],
                        [{ text: '–ó–¥–æ—Ä–æ–≤\'—è', callback_data: 'health' }],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞—É–∞', callback_data: 'back_to_region_selection' }],
                    ]
                }
            };
            bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–∞', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: options.reply_markup
            }).catch(error => {
                console.error('Error editing message text:', error);
            });
            break;
        case 'by':
            options = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ü—Ä—ã–≥–∞–∂–æ—Å—Ü—å', callback_data: 'beauty' }],
                        [{ text: '–ó–¥–∞—Ä–æ—û–µ', callback_data: 'health' }],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞ –±—É', callback_data: 'back_to_region_selection' }],
                    ]
                }
            };
            bot.editMessageText('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±—É', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: options.reply_markup
            }).catch(error => {
                console.error('Error editing message text:', error);
            });
            break;
    }
}


function sendWarsawRegionsKeyboard(chatId, messageId) {
    const options = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'Wola', callback_data: 'region_wola' }],
                [{ text: 'Mokotow', callback_data: 'region_mokotow' }],
                [{ text: 'Bemowo', callback_data: 'region_bemowo' }],
                [{ text: 'All', callback_data: 'region_all' }],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞', callback_data: 'back_to_city_selection' }],
            ]
        }
    };

    let region;
    switch (selMsg){
        case 'ru':
            region = '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –í–∞—Ä—à–∞–≤—ã'
            break;
        case 'pl':
            region = 'Wybierz region Warszawy'
            break;
        case 'ua':
            region = '–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω –í–∞—Ä—à–∞–≤–∏'
            break;
        case 'by':
            region = '–í—ã–±–µ—Ä—ã—Ü–µ —Ä—ç–≥—ñ—ë–Ω –í–∞—Ä—à–∞–≤—ã'
            break;
    }

    const messageRegion = region
    bot.editMessageText(messageRegion, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: options.reply_markup
    }).catch(error => {
        console.error('Error editing message text:', error);
    });
}